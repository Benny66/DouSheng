// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Go-To-Byte/DouSheng/dal/model"
)

func newVideoComment(db *gorm.DB, opts ...gen.DOOption) videoComment {
	_videoComment := videoComment{}

	_videoComment.videoCommentDo.UseDB(db, opts...)
	_videoComment.videoCommentDo.UseModel(&model.VideoComment{})

	tableName := _videoComment.videoCommentDo.TableName()
	_videoComment.ALL = field.NewAsterisk(tableName)
	_videoComment.CommentID = field.NewInt64(tableName, "comment_id")
	_videoComment.CommentVideo = field.NewInt64(tableName, "comment_video")
	_videoComment.CommentUser = field.NewInt64(tableName, "comment_user")
	_videoComment.Comment = field.NewString(tableName, "comment")

	_videoComment.fillFieldMap()

	return _videoComment
}

type videoComment struct {
	videoCommentDo videoCommentDo

	ALL          field.Asterisk
	CommentID    field.Int64
	CommentVideo field.Int64
	CommentUser  field.Int64
	Comment      field.String

	fieldMap map[string]field.Expr
}

func (v videoComment) Table(newTableName string) *videoComment {
	v.videoCommentDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoComment) As(alias string) *videoComment {
	v.videoCommentDo.DO = *(v.videoCommentDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoComment) updateTableName(table string) *videoComment {
	v.ALL = field.NewAsterisk(table)
	v.CommentID = field.NewInt64(table, "comment_id")
	v.CommentVideo = field.NewInt64(table, "comment_video")
	v.CommentUser = field.NewInt64(table, "comment_user")
	v.Comment = field.NewString(table, "comment")

	v.fillFieldMap()

	return v
}

func (v *videoComment) WithContext(ctx context.Context) IVideoCommentDo {
	return v.videoCommentDo.WithContext(ctx)
}

func (v videoComment) TableName() string { return v.videoCommentDo.TableName() }

func (v videoComment) Alias() string { return v.videoCommentDo.Alias() }

func (v *videoComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoComment) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["comment_id"] = v.CommentID
	v.fieldMap["comment_video"] = v.CommentVideo
	v.fieldMap["comment_user"] = v.CommentUser
	v.fieldMap["comment"] = v.Comment
}

func (v videoComment) clone(db *gorm.DB) videoComment {
	v.videoCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoComment) replaceDB(db *gorm.DB) videoComment {
	v.videoCommentDo.ReplaceDB(db)
	return v
}

type videoCommentDo struct{ gen.DO }

type IVideoCommentDo interface {
	gen.SubQuery
	Debug() IVideoCommentDo
	WithContext(ctx context.Context) IVideoCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoCommentDo
	WriteDB() IVideoCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoCommentDo
	Not(conds ...gen.Condition) IVideoCommentDo
	Or(conds ...gen.Condition) IVideoCommentDo
	Select(conds ...field.Expr) IVideoCommentDo
	Where(conds ...gen.Condition) IVideoCommentDo
	Order(conds ...field.Expr) IVideoCommentDo
	Distinct(cols ...field.Expr) IVideoCommentDo
	Omit(cols ...field.Expr) IVideoCommentDo
	Join(table schema.Tabler, on ...field.Expr) IVideoCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoCommentDo
	Group(cols ...field.Expr) IVideoCommentDo
	Having(conds ...gen.Condition) IVideoCommentDo
	Limit(limit int) IVideoCommentDo
	Offset(offset int) IVideoCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoCommentDo
	Unscoped() IVideoCommentDo
	Create(values ...*model.VideoComment) error
	CreateInBatches(values []*model.VideoComment, batchSize int) error
	Save(values ...*model.VideoComment) error
	First() (*model.VideoComment, error)
	Take() (*model.VideoComment, error)
	Last() (*model.VideoComment, error)
	Find() ([]*model.VideoComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoComment, err error)
	FindInBatches(result *[]*model.VideoComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoCommentDo
	Assign(attrs ...field.AssignExpr) IVideoCommentDo
	Joins(fields ...field.RelationField) IVideoCommentDo
	Preload(fields ...field.RelationField) IVideoCommentDo
	FirstOrInit() (*model.VideoComment, error)
	FirstOrCreate() (*model.VideoComment, error)
	FindByPage(offset int, limit int) (result []*model.VideoComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoCommentDo) Debug() IVideoCommentDo {
	return v.withDO(v.DO.Debug())
}

func (v videoCommentDo) WithContext(ctx context.Context) IVideoCommentDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoCommentDo) ReadDB() IVideoCommentDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoCommentDo) WriteDB() IVideoCommentDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoCommentDo) Session(config *gorm.Session) IVideoCommentDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoCommentDo) Clauses(conds ...clause.Expression) IVideoCommentDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoCommentDo) Returning(value interface{}, columns ...string) IVideoCommentDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoCommentDo) Not(conds ...gen.Condition) IVideoCommentDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoCommentDo) Or(conds ...gen.Condition) IVideoCommentDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoCommentDo) Select(conds ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoCommentDo) Where(conds ...gen.Condition) IVideoCommentDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoCommentDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoCommentDo) Order(conds ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoCommentDo) Distinct(cols ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoCommentDo) Omit(cols ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoCommentDo) Join(table schema.Tabler, on ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoCommentDo) Group(cols ...field.Expr) IVideoCommentDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoCommentDo) Having(conds ...gen.Condition) IVideoCommentDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoCommentDo) Limit(limit int) IVideoCommentDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoCommentDo) Offset(offset int) IVideoCommentDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoCommentDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoCommentDo) Unscoped() IVideoCommentDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoCommentDo) Create(values ...*model.VideoComment) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoCommentDo) CreateInBatches(values []*model.VideoComment, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoCommentDo) Save(values ...*model.VideoComment) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoCommentDo) First() (*model.VideoComment, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComment), nil
	}
}

func (v videoCommentDo) Take() (*model.VideoComment, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComment), nil
	}
}

func (v videoCommentDo) Last() (*model.VideoComment, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComment), nil
	}
}

func (v videoCommentDo) Find() ([]*model.VideoComment, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoComment), err
}

func (v videoCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoComment, err error) {
	buf := make([]*model.VideoComment, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoCommentDo) FindInBatches(result *[]*model.VideoComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoCommentDo) Attrs(attrs ...field.AssignExpr) IVideoCommentDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoCommentDo) Assign(attrs ...field.AssignExpr) IVideoCommentDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoCommentDo) Joins(fields ...field.RelationField) IVideoCommentDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoCommentDo) Preload(fields ...field.RelationField) IVideoCommentDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoCommentDo) FirstOrInit() (*model.VideoComment, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComment), nil
	}
}

func (v videoCommentDo) FirstOrCreate() (*model.VideoComment, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComment), nil
	}
}

func (v videoCommentDo) FindByPage(offset int, limit int) (result []*model.VideoComment, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoCommentDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoCommentDo) Delete(models ...*model.VideoComment) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoCommentDo) withDO(do gen.Dao) *videoCommentDo {
	v.DO = *do.(*gen.DO)
	return v
}
