// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	User          *user
	UserFollow    *userFollow
	UserFollower  *userFollower
	UserInfo      *userInfo
	UserMessage   *userMessage
	VideoComment  *videoComment
	VideoFavorite *videoFavorite
	VideoInfo     *videoInfo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	User = &Q.User
	UserFollow = &Q.UserFollow
	UserFollower = &Q.UserFollower
	UserInfo = &Q.UserInfo
	UserMessage = &Q.UserMessage
	VideoComment = &Q.VideoComment
	VideoFavorite = &Q.VideoFavorite
	VideoInfo = &Q.VideoInfo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		User:          newUser(db, opts...),
		UserFollow:    newUserFollow(db, opts...),
		UserFollower:  newUserFollower(db, opts...),
		UserInfo:      newUserInfo(db, opts...),
		UserMessage:   newUserMessage(db, opts...),
		VideoComment:  newVideoComment(db, opts...),
		VideoFavorite: newVideoFavorite(db, opts...),
		VideoInfo:     newVideoInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	User          user
	UserFollow    userFollow
	UserFollower  userFollower
	UserInfo      userInfo
	UserMessage   userMessage
	VideoComment  videoComment
	VideoFavorite videoFavorite
	VideoInfo     videoInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		User:          q.User.clone(db),
		UserFollow:    q.UserFollow.clone(db),
		UserFollower:  q.UserFollower.clone(db),
		UserInfo:      q.UserInfo.clone(db),
		UserMessage:   q.UserMessage.clone(db),
		VideoComment:  q.VideoComment.clone(db),
		VideoFavorite: q.VideoFavorite.clone(db),
		VideoInfo:     q.VideoInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		User:          q.User.replaceDB(db),
		UserFollow:    q.UserFollow.replaceDB(db),
		UserFollower:  q.UserFollower.replaceDB(db),
		UserInfo:      q.UserInfo.replaceDB(db),
		UserMessage:   q.UserMessage.replaceDB(db),
		VideoComment:  q.VideoComment.replaceDB(db),
		VideoFavorite: q.VideoFavorite.replaceDB(db),
		VideoInfo:     q.VideoInfo.replaceDB(db),
	}
}

type queryCtx struct {
	User          IUserDo
	UserFollow    IUserFollowDo
	UserFollower  IUserFollowerDo
	UserInfo      IUserInfoDo
	UserMessage   IUserMessageDo
	VideoComment  IVideoCommentDo
	VideoFavorite IVideoFavoriteDo
	VideoInfo     IVideoInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		User:          q.User.WithContext(ctx),
		UserFollow:    q.UserFollow.WithContext(ctx),
		UserFollower:  q.UserFollower.WithContext(ctx),
		UserInfo:      q.UserInfo.WithContext(ctx),
		UserMessage:   q.UserMessage.WithContext(ctx),
		VideoComment:  q.VideoComment.WithContext(ctx),
		VideoFavorite: q.VideoFavorite.WithContext(ctx),
		VideoInfo:     q.VideoInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
