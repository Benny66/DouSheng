// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Go-To-Byte/DouSheng/dal/model"
)

func newUserFollower(db *gorm.DB, opts ...gen.DOOption) userFollower {
	_userFollower := userFollower{}

	_userFollower.userFollowerDo.UseDB(db, opts...)
	_userFollower.userFollowerDo.UseModel(&model.UserFollower{})

	tableName := _userFollower.userFollowerDo.TableName()
	_userFollower.ALL = field.NewAsterisk(tableName)
	_userFollower.FollowerId1 = field.NewInt64(tableName, "follower_id1")
	_userFollower.FollowerId2 = field.NewInt64(tableName, "follower_id2")
	_userFollower.FollowerFlag = field.NewInt64(tableName, "follower_flag")

	_userFollower.fillFieldMap()

	return _userFollower
}

type userFollower struct {
	userFollowerDo userFollowerDo

	ALL          field.Asterisk
	FollowerId1  field.Int64
	FollowerId2  field.Int64
	FollowerFlag field.Int64

	fieldMap map[string]field.Expr
}

func (u userFollower) Table(newTableName string) *userFollower {
	u.userFollowerDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFollower) As(alias string) *userFollower {
	u.userFollowerDo.DO = *(u.userFollowerDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFollower) updateTableName(table string) *userFollower {
	u.ALL = field.NewAsterisk(table)
	u.FollowerId1 = field.NewInt64(table, "follower_id1")
	u.FollowerId2 = field.NewInt64(table, "follower_id2")
	u.FollowerFlag = field.NewInt64(table, "follower_flag")

	u.fillFieldMap()

	return u
}

func (u *userFollower) WithContext(ctx context.Context) IUserFollowerDo {
	return u.userFollowerDo.WithContext(ctx)
}

func (u userFollower) TableName() string { return u.userFollowerDo.TableName() }

func (u userFollower) Alias() string { return u.userFollowerDo.Alias() }

func (u *userFollower) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFollower) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["follower_id1"] = u.FollowerId1
	u.fieldMap["follower_id2"] = u.FollowerId2
	u.fieldMap["follower_flag"] = u.FollowerFlag
}

func (u userFollower) clone(db *gorm.DB) userFollower {
	u.userFollowerDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFollower) replaceDB(db *gorm.DB) userFollower {
	u.userFollowerDo.ReplaceDB(db)
	return u
}

type userFollowerDo struct{ gen.DO }

type IUserFollowerDo interface {
	gen.SubQuery
	Debug() IUserFollowerDo
	WithContext(ctx context.Context) IUserFollowerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFollowerDo
	WriteDB() IUserFollowerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFollowerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFollowerDo
	Not(conds ...gen.Condition) IUserFollowerDo
	Or(conds ...gen.Condition) IUserFollowerDo
	Select(conds ...field.Expr) IUserFollowerDo
	Where(conds ...gen.Condition) IUserFollowerDo
	Order(conds ...field.Expr) IUserFollowerDo
	Distinct(cols ...field.Expr) IUserFollowerDo
	Omit(cols ...field.Expr) IUserFollowerDo
	Join(table schema.Tabler, on ...field.Expr) IUserFollowerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFollowerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFollowerDo
	Group(cols ...field.Expr) IUserFollowerDo
	Having(conds ...gen.Condition) IUserFollowerDo
	Limit(limit int) IUserFollowerDo
	Offset(offset int) IUserFollowerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFollowerDo
	Unscoped() IUserFollowerDo
	Create(values ...*model.UserFollower) error
	CreateInBatches(values []*model.UserFollower, batchSize int) error
	Save(values ...*model.UserFollower) error
	First() (*model.UserFollower, error)
	Take() (*model.UserFollower, error)
	Last() (*model.UserFollower, error)
	Find() ([]*model.UserFollower, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFollower, err error)
	FindInBatches(result *[]*model.UserFollower, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFollower) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFollowerDo
	Assign(attrs ...field.AssignExpr) IUserFollowerDo
	Joins(fields ...field.RelationField) IUserFollowerDo
	Preload(fields ...field.RelationField) IUserFollowerDo
	FirstOrInit() (*model.UserFollower, error)
	FirstOrCreate() (*model.UserFollower, error)
	FindByPage(offset int, limit int) (result []*model.UserFollower, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFollowerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFollowerDo) Debug() IUserFollowerDo {
	return u.withDO(u.DO.Debug())
}

func (u userFollowerDo) WithContext(ctx context.Context) IUserFollowerDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFollowerDo) ReadDB() IUserFollowerDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFollowerDo) WriteDB() IUserFollowerDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFollowerDo) Session(config *gorm.Session) IUserFollowerDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFollowerDo) Clauses(conds ...clause.Expression) IUserFollowerDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFollowerDo) Returning(value interface{}, columns ...string) IUserFollowerDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFollowerDo) Not(conds ...gen.Condition) IUserFollowerDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFollowerDo) Or(conds ...gen.Condition) IUserFollowerDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFollowerDo) Select(conds ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFollowerDo) Where(conds ...gen.Condition) IUserFollowerDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFollowerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserFollowerDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userFollowerDo) Order(conds ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFollowerDo) Distinct(cols ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFollowerDo) Omit(cols ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFollowerDo) Join(table schema.Tabler, on ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFollowerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFollowerDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFollowerDo) Group(cols ...field.Expr) IUserFollowerDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFollowerDo) Having(conds ...gen.Condition) IUserFollowerDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFollowerDo) Limit(limit int) IUserFollowerDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFollowerDo) Offset(offset int) IUserFollowerDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFollowerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFollowerDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFollowerDo) Unscoped() IUserFollowerDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFollowerDo) Create(values ...*model.UserFollower) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFollowerDo) CreateInBatches(values []*model.UserFollower, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFollowerDo) Save(values ...*model.UserFollower) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFollowerDo) First() (*model.UserFollower, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) Take() (*model.UserFollower, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) Last() (*model.UserFollower, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) Find() ([]*model.UserFollower, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFollower), err
}

func (u userFollowerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFollower, err error) {
	buf := make([]*model.UserFollower, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFollowerDo) FindInBatches(result *[]*model.UserFollower, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFollowerDo) Attrs(attrs ...field.AssignExpr) IUserFollowerDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFollowerDo) Assign(attrs ...field.AssignExpr) IUserFollowerDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFollowerDo) Joins(fields ...field.RelationField) IUserFollowerDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFollowerDo) Preload(fields ...field.RelationField) IUserFollowerDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFollowerDo) FirstOrInit() (*model.UserFollower, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) FirstOrCreate() (*model.UserFollower, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) FindByPage(offset int, limit int) (result []*model.UserFollower, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFollowerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFollowerDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFollowerDo) Delete(models ...*model.UserFollower) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFollowerDo) withDO(do gen.Dao) *userFollowerDo {
	u.DO = *do.(*gen.DO)
	return u
}
